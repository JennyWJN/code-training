#include <iostream>
#include <cstring>
#include <stdlib.h>
#include <vector>
using namespace std;

int minx=LONG_MAX;
int dis=0;

int main()
{
    int M,N,C1,C2;
    cin>>M>>N>>C1>>C2;
    vector<int> rescue;
    for(int i=0;i<M;i++){
        cin>>rescue[i];
    }
    vector<vector<int> > path(5,vector<int>(5,LONG_MAX));
    for(int i=0;i<N;i++){
        int m,n;
        cin>>m>>n;
        cin>>path[m][n];
        path[n][m]=path[m][n];
    }
    dfs(C1,0,M,C2);
    cout<<minx;
    return 0;
}

void dfs(int cur, int dis, int n,int t) //cur-当前所在城市编号，dis-当前已走过的路径
{
    if(dis > minx) return; //若当前路径已比之前找到的最短路大，没必要继续尝试（一个小优化，可以不写）
    if(cur == t) //当前已到达目的城市，更新min
    {
        if(dis < minx) minx = dis;
        return;
    }

    for(int i = 0; i < n; i++) //对1~n号城市依次尝试
    {
        if(path[cur][i] != LONG_MAX && book[i] == 0) //若cur与i可达，且i没有在已走过的路径中
        {
            book[i] = 1; //标记i为已在路径中
            dfs(i, dis+e[cur][i]); //继续搜索
            book[i] = 0; //对从i出发的路径探索完毕，取消标记
        }
    }
}
